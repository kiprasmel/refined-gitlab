# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

query {
	user(username: "kipras") {
		id
		avatarUrl
		name
		username
		state
		projectMemberships {
			edges {
				node {
					id
					project {
						statistics {
							commitCount
						}

						# repository {
						#   tree {
						#     blobs {
						#       edges {
						#         node {
						#           id
						#         }
						#       }
						#     }
						#     lastCommit {
						#       author {
						#         id
						#         username
						#         name
						#       }
						#     }
						#   }
						# }
					}
				}
			}
		}

		# snippets {
		#   edges {
		#     node {
		#       id
		#     }
		#   }
		# }
		# projectMemberships {
		#   edges {
		#     node {
		#       id
		#       project {
		#         id
		# name
		#       }
		#     }
		#   }
		# }
		# groupMemberships {
		#   edges {
		#     node {
		#       createdAt
		#       expiresAt
		#       updatedAt
		#       group {
		#         id
		#         fullName
		#       }
		#     }
		#   }
		# }
	}

	projects(search: "") {
		edges {
			node {
				name
				description
				id
				avatarUrl
				repository {
					rootRef
					tree {
						trees {
							edges {
								node {
									id
									type
									sha
									flatPath
									webUrl
								}
							}
						}
						blobs {
							pageInfo {
								endCursor
								startCursor
							}
							edges {
								cursor
								node {
									id
									type
									mode
									sha
									flatPath
									lfsOid
									webUrl
								}
							}
							# nodes {
							#     id
							#     type
							#     mode
							#     sha
							#     flatPath
							#     lfsOid
							#     webUrl
							# }
						}
					}
				}
			}
		}
		nodes {
			id
		}
	}
}
